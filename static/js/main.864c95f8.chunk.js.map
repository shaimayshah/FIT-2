{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","class","styles","container","Grid","spacing","justify","item","component","Card","xs","md","className","cx","card","infected","CardContent","Typography","variant","start","end","value","duration","separator","secondary","Date","toUTCString","active","gutterBottom","toFixed","url","fetchData","country","a","changeableURL","axios","get","console","log","fetchDailyData","neededData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","options","title","display","text","maintainAspectRatio","scales","xAxes","gridLines","yAxes","barChart","backgroundColor","legend","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","style","color","default","onChange","e","target","i","key","App","state","fetchedData","setState","this","heading","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.864c95f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"secondary\":\"Cards_secondary__1wkdG\",\"infected\":\"Cards_infected__-adYp\",\"active\":\"Cards_active__1mwzX\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport {Card, CardContent, Typography, Grid, Paper} from '@material-ui/core';\nimport styles from './Cards.module.css'\nimport CountUp from 'react-countup'\nimport 'fontsource-roboto';\n\n// To apply multiple class (CSS)\nimport cx from 'classnames'\n\n\nconst Cards = ({data :{confirmed, recovered, deaths, lastUpdate}}) => {\n    if(!confirmed){\n        return 'Loading...';\n    }\n    return (\n        <div class={styles.container}>\n            <Grid container spacing={3} justify='center'>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                <CardContent >\n                        {/* Basically the <p> tag for material UI, gutterbottom provides a bottom margin */}\n                        <Typography>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={confirmed.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography className={styles.secondary} variant=\"body2\">{new Date(lastUpdate).toUTCString()}</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.active)}>\n                <CardContent >\n                        {/* Basically the <p> tag for material UI, gutterbottom provides a bottom margin */}\n                        <Typography>Active</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={confirmed.value - recovered.value - deaths.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography gutterBottom>{(((confirmed.value - recovered.value - deaths.value)/confirmed.value)*100).toFixed(2)}%</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                <CardContent >\n                        {/* Basically the <p> tag for material UI, gutterbottom provides a bottom margin */}\n                        <Typography>Recovered</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={recovered.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography gutterBottom>{(((recovered.value)/confirmed.value)*100).toFixed(2)}%</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                <CardContent >\n                        {/* Basically the <p> tag for material UI, gutterbottom provides a bottom margin */}\n                        <Typography>Deaths</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={deaths.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography gutterBottom>{((deaths.value/confirmed.value)*100).toFixed(2)}%</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","import axios from 'axios' // Used to make api requests\n\nconst url = \"https://covid19.mathdro.id/api\"\n\n// Makes sense to use an async function here because its I/O. Also, a common practice. \n// Returns the data we need (country, global)\nexport const fetchData = async (country) => {\n    let changeableURL = url;\n\n     if(country) {\n         changeableURL = `${url}/countries/${country}`\n     }\n\n    try {\n        const { data: {confirmed, recovered, deaths, lastUpdate} } = await axios.get(changeableURL);\n        return {confirmed, recovered, deaths, lastUpdate};\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchDailyData = async() => {\n    try {\n        const {data} = await axios.get(`${url}/daily`);\n        \n        const neededData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total, \n            date: dailyData.reportDate\n        }));\n\n        return neededData;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchCountries = async() =>{\n    try{\n        const {data:{countries}} = await axios.get(`${url}/countries`);\n        return countries.map((country) => country.name)\n\n    } catch(error){\n        console.log(error);\n    }\n}","import React, {useState, useEffect} from 'react';\nimport { fetchDailyData} from '../../api';\nimport {Line, Bar} from 'react-chartjs-2';\n\nimport styles from './Chart.module.css'\n\nconst Chart = ({data:{confirmed, recovered, deaths}, country}) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(()=> {\n        const fetchAPI = async() =>{\n            setDailyData(await fetchDailyData());\n        }\n\n        fetchAPI();\n    }, []);\n\n    // If data has not been rendered, return null. \n    const lineChart = (\n        dailyData.length\n        ? \n        (<Line \n        data = {{\n            labels: dailyData.map(({date}) => date), /*returns all of the dates*/\n            datasets: [{\n                data:dailyData.map(({confirmed}) => confirmed),\n                label: 'Infected',\n                borderColor: 'rgb(255, 7, 58)',\n                fill: false,\n            }, \n            {data:dailyData.map(({deaths}) => deaths),\n            label: \"Deaths\",\n            borderColor: 'rgb(107, 117, 126)',\n            fill: false,}] \n        }}\n        options={{\n            title:{display: true, text:'Global COVID Cases and Deaths'},\n            maintainAspectRatio: false,\n            scales: {\n                xAxes: [{\n                    gridLines: {\n                        display:false\n                    }\n                }],\n                yAxes: [{\n                    gridLines: {\n                        display:false\n                    }   \n                }]\n            }\n        }}\n        />) : null\n    );\n\n\n\n\n    const barChart = (\n        confirmed \n        ? \n        (\n            <Bar  \n            data={{\n                labels: ['Infected', `Active (${(((confirmed.value - recovered.value - deaths.value)/confirmed.value)*100).toFixed(2)}%)`, `Recovered (${((recovered.value/confirmed.value)*100).toFixed(2)}%)`, `Deaths (${((deaths.value/confirmed.value)*100).toFixed(2)}%)`],\n                datasets: [{\n                    label: `People`,\n                    backgroundColor: [\"rgb(255, 7, 58)\", \"rgb(45, 176, 246)\", \"rgb(0,176,72)\", \"rgb(107, 117, 126)\"],\n                    data: [confirmed.value, confirmed.value-recovered.value-deaths.value ,recovered.value, deaths.value]\n                }]\n            }}\n            options = {{\n                legend: {display: false},\n                title: {display: true, text:`Current state in ${country}`},\n                maintainAspectRatio: false,\n                scales: {\n                    xAxes: [{\n                        gridLines: {\n                            display:false\n                        }\n                    }],\n                    yAxes: [{\n                        gridLines: {\n                            display:false\n                        }   \n                    }]\n                }\n            }}\n            />\n        ) : null\n    );\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart: lineChart}\n        </div>\n    )\n}\n\nexport default Chart;","import React, {useState, useEffect} from 'react';\nimport {NativeSelect, FormControl} from '@material-ui/core'\nimport styles from './CountryPicker.module.css'\n\nimport {fetchCountries} from '../../api'\n\nconst CountryPicker = ({handleCountryChange}) => {\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n\n\n    // UseEffect works with two parameters\n    useEffect(() => {\n        const fetchAPI = async() => {\n            setFetchedCountries(await fetchCountries());\n        }\n\n        fetchAPI();\n    }, [setFetchedCountries]);\n    \n    // console.log(fetchedCountries)\n    return(\n        <FormControl variant=\"outlined\" className={styles.formControl}>\n            <NativeSelect variant=\"outlined\" style={{color: \"white\"}} default=\"\" onChange={(e) => {handleCountryChange(e.target.value)}}>\n                <option value=\"\">Global</option>\n                {fetchedCountries.map((country, i) => <option key = {i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker;","import React from 'react'\nimport 'fontsource-roboto';\nimport {Cards, Chart, CountryPicker} from './components';\nimport styles from './App.module.css'\nimport { fetchData } from './api'\n\n// Better to use class rather than hooks when dealing with asynchronous data. \nclass App extends React.Component {\n\n    // Letting the data be seen outside of the scope of the async\n    // Initial States\n    state = {\n        data: {},\n        country: '',\n    }\n    // when component is being created and inserted in DOM. \n    // making a request to fetchData which is in index.js\n    async componentDidMount(){\n        const fetchedData = await fetchData()\n        this.setState({data:fetchedData})\n    }\n\n    handleCountryChange = async(country) => {\n        const fetchedData = await fetchData(country);\n\n        // fetch data\n        console.log(fetchedData);\n        // set state\n        this.setState(\n            { data: fetchedData, country: country }\n        );\n    }\n\n    render(){\n        return(\n        // Class name is this to ensure that there is no interference with other styles\n        <div className={styles.container}>\n            {/* <img src = {coronaimage} className = {styles.image} alt=\"COVID\"></img> */}\n            <h1 className = {styles.heading}>COVID-19 Tracker</h1>\n            <CountryPicker handleCountryChange={this.handleCountryChange}/>\n            <Chart data={this.state.data} country={this.state.country}/>\n            <Cards data = {this.state.data}/>\n        </div>\n        )\n    }\n\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App'\n\n// Get the div with id 'root' that is native to react. \nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};"],"sourceRoot":""}